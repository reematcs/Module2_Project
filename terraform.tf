variable environment{
  default = ""
}

locals {
  ami_id = "ami-0557a15b87f6559cf"
  vpc_id = "vpc-07a08ebb1194b963f"
  ssh_user = "ubuntu"
  key_name = "terraform"
  private_key_path = "terraform.pem"
}


resource "aws_security_group" "projectmodule2_sec_group" {
	name   = "projectmodule2_sec_group"
	vpc_id = local.vpc_id

  ingress {
		from_port   = 22
		to_port     = 22
		protocol    = "tcp"
		cidr_blocks = ["0.0.0.0/0"]
	}
  ingress {
		from_port   = 80
		to_port     = 80
		protocol    = "tcp"
		cidr_blocks = ["0.0.0.0/0"]
	}
  egress {
		from_port   = 0
		to_port     = 0
		protocol    = "-1"
		cidr_blocks = ["0.0.0.0/0"]
	}
}

resource "aws_instance" "ansible_provisioning_server" {
  ami = local.ami_id
  instance_type = "t2.micro"
  associate_public_ip_address = "true"
  vpc_security_group_ids =[aws_security_group.projectmodule2_sec_group.id]
  key_name = local.key_name

  tags = {
    Name = "Ansible_Provisioning_Server"
  }

  connection {
    type = "ssh"
    host = self.public_ip
    user = local.ssh_user
    private_key = file(local.private_key_path)
    timeout = "4m"
  }

# TODO: Try using aws user data to run at boot time
# TODO: Have the content on a script
  provisioner "remote-exec" {
    inline = [
      "sudo apt-add-repository -y ppa:ansible/ansible",
      "curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo tee /usr/share/keyrings/jenkins-keyring.asc > /dev/null", 
      "echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] https://pkg.jenkins.io/debian-stable binary/ | sudo tee /etc/apt/sources.list.d/jenkins.list > /dev/null",     
      "sudo apt update",
      "sudo apt install openjdk-11-jdk -y",
      "sudo apt install ansible -y",
      "sudo apt install git -y",
      # upload ansible dir
      # make sure that the inventory file has the ip that was spun up for the worker
      # USE AN S3 BUCKET - install AWS tools locally - so you can hold the ansible dir
      "git clone https://reematcs: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@github.com/reematcs/Module2_Project.git",
      "sudo apt install jenkins -y",
      "sudo systemctl start jenkins",
    ]
  }

}

resource "aws_instance" "ansible_worker" {
  ami = local.ami_id
  instance_type = "t2.micro"
  associate_public_ip_address = "true"
  vpc_security_group_ids =[aws_security_group.projectmodule2_sec_group.id]
  key_name = local.key_name

  tags = {
    Name = "Ansible_Provisioning_Worker"
    environment = "${var.environment}"
  }

  connection {
    type = "ssh"
    host = self.public_ip
    user = local.ssh_user
    private_key = file(local.private_key_path)
    timeout = "4m"
  }
   
}

# Export Terraform variable values to an Ansible var_file
resource "local_file" "tf_ansible_vars_file_new" {
  content = <<-DOC
    # Ansible vars_file containing variable values from Terraform.
    # Generated by Terraform mgmt configuration.

    tf_environment: "${var.environment}"
    DOC
  filename = "./ansible_provisioning/tf_ansible_vars_file.yml"
}