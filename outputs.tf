output "ip_worker" {
  value = aws_instance.ansible_worker.public_ip
}
output "ip_server" {
  value = aws_instance.ansible_provisioning_server.public_ip
}
# Export Terraform variable values to an Ansible var_file
resource "local_file" "tf_ansible_inventory" {
  content = <<-DOC
    # Ansible vars_file containing variable values from Terraform.
    # Generated by Terraform mgmt configuration.

    [webservers]
    ${aws_instance.ansible_worker.public_ip}
    DOC
  filename = "./ansible_provisioning/inventory"
}

resource "aws_s3_bucket_policy" "public_read_access" {
  bucket = aws_s3_bucket.b1.id
  policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
	  "Principal": "*",
      "Action": [ "s3:*" ],
      "Resource": [
        "${aws_s3_bucket.b1.arn}",
        "${aws_s3_bucket.b1.arn}/*"
      ]
    }
  ]
}
EOF
}

data "archive_file" "data_backup" {
  type        = "zip"
  source_dir = "./ansible_provisioning"
  output_path = "${var.ansible_zip}"
}
# }
# Upload an object
resource "aws_s3_object" "object" {
#    count = data.aws_s3_bucket.b1.id ? 1 : 0
    # bucket_id_ref = data.aws_s3_bucket.b1.id
    bucket = aws_s3_bucket.b1.id
    key = "${var.ansible_zip}"
    source = "${var.ansible_zip}"
    etag = filemd5("${var.ansible_zip}")

}

resource "null_resource" "ProvisionRemoteHostsIpToAnsibleHosts" {
 
  connection {
    type = "ssh"
    host = aws_instance.ansible_provisioning_server.public_ip
    user = local.ssh_user
    private_key = file(local.private_key_path)
    timeout = "4m"
  }

  provisioner "remote-exec" {
    inline = [
      "while ! which aws; do sleep 10; echo \"Sleeping for a bit...\"; done",
      "sudo aws s3 cp s3://${aws_s3_bucket.b1.id}/ansible.zip .",
      "unzip ansible.zip",
      "ansible-playbook tomcat.yml"

    ]
  }
}
